// Generated by CoffeeScript 1.3.3
'use strict';

var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

angular.module('Courses.services', []).factory('Course', function($http, $q) {
  var Course;
  return Course = (function() {

    function Course(id, title, description, course_key, num_sections, semester) {
      this.id = id;
      this.title = title;
      this.description = description;
      this.course_key = course_key;
      this.num_sections = num_sections;
      this.semester = semester;
      this.getInfo = __bind(this.getInfo, this);

      this.sectionRefs = [];
    }

    Course.prototype.getInfo = function() {
      var d,
        _this = this;
      if (this.sections) {
        return;
      }
      d = $q.defer();
      $http({
        method: 'JSONP',
        url: 'http://courses.adicu.com/courses/get',
        params: {
          course_key: this.course_key,
          s: this.semester,
          callback: 'JSON_CALLBACK'
        }
      }).success(function(data, status, headers, config) {
        _this.points = data.points;
        _this.sections = data.sections;
        return d.resolve(_this);
      }).error(function(data, status) {
        return d.reject(status);
      });
      return d.promise;
    };

    Course.search = function(query, semester, length, page) {
      var d;
      d = $q.defer();
      $http({
        method: 'JSONP',
        url: 'http://courses.adicu.com/courses/search',
        params: {
          q: query,
          s: semester,
          l: length,
          p: page,
          callback: 'JSON_CALLBACK'
        }
      }).success(function(data, status, headers, config) {
        var out, result, _i, _len, _ref;
        if (!data || !data.results) {
          return;
        }
        out = [];
        _ref = data.results;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          result = _ref[_i];
          if (result.title) {
            out.push(new Course(result.id, result.title, result.description, result.course_key, result.num_sections, semester));
          }
        }
        return d.resolve(out);
      }).error(function(data, status) {
        return d.reject(status);
      });
      return d.promise;
    };

    Course.getDays = function(section) {
      var day, days, daysAbbr, daysStr, _i, _len;
      daysAbbr = "MTWRF";
      days = [];
      daysStr = section.days;
      for (_i = 0, _len = daysStr.length; _i < _len; _i++) {
        day = daysStr[_i];
        if (daysAbbr.indexOf(day !== -1)) {
          days.push(daysAbbr.indexOf(day));
        }
      }
      return days;
    };

    return Course;

  }).call(this);
}).factory('Calendar', function(Course) {
  var Calendar;
  return Calendar = (function() {

    function Calendar() {
      this.showAllSections = __bind(this.showAllSections, this);

      var i, _i;
      this.courses = [];
      this.courseCalendar = [];
      for (i = _i = 0; _i <= 6; i = ++_i) {
        this.courseCalendar[i] = [];
      }
    }

    Calendar.prototype.showAllSections = function(course) {
      var day, newSection, overlap, overlapCheck, section, _i, _j, _len, _len1, _ref, _ref1, _results;
      course.sectionRefs = [];
      overlapCheck = {};
      _ref = course.sections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        section = _ref[_i];
        newSection = {
          'id': section.id,
          'computedCss': Calendar.computeCss(section.start, section.end),
          'title': section.title,
          'points': course.points,
          'days': Course.getDays(section)
        };
        overlap = overlapCheck[section.start + '' + section.end + section.days];
        if (!overlap) {
          course.sectionRefs.push(newSection);
          overlapCheck[section.start + '' + section.end + section.days] = newSection;
        } else {
          if (!overlap.overlaps) {
            overlap.overlaps = [];
          }
          overlap.overlaps.push(newSection);
        }
      }
      console.log(course.sectionRefs);
      console.log(overlapCheck);
      this.courses.push(course);
      _ref1 = course.sectionRefs;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        section = _ref1[_j];
        _results.push((function() {
          var _k, _len2, _ref2, _results1;
          _ref2 = section.days;
          _results1 = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            day = _ref2[_k];
            _results1.push(this.courseCalendar[day].push(section));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Calendar.computeCss = function(start, end) {
      var height_pixels, start_pixels;
      start_pixels = (start - Calendar.options.start_hour) * Calendar.options.pixels_per_hour;
      height_pixels = Math.abs(end - start) * Calendar.options.pixels_per_hour;
      return {
        "top": start_pixels,
        "height": height_pixels
      };
    };

    Calendar.options = {
      pixels_per_hour: 42,
      start_hour: 8
    };

    Calendar.getValidSemesters = function() {
      var effectiveMonth, i, month, semester, semesters, year, _i;
      semesters = [];
      month = new Date().getMonth() + 1;
      year = new Date().getFullYear();
      effectiveMonth = month + 1;
      for (i = _i = 0; _i <= 2; i = ++_i) {
        if (effectiveMonth > 11) {
          effectiveMonth %= 12;
          year++;
        }
        semester = Math.floor(effectiveMonth / 4) + 1;
        effectiveMonth += 4;
        semesters.push(year + '' + semester);
      }
      return semesters;
    };

    Calendar.hours = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];

    Calendar.days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];

    return Calendar;

  })();
});
